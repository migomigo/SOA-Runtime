<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions name="Calculator"
	targetNamespace="http://codegen.tools.soaframework.test.ebay.com"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:tns="http://codegen.tools.soaframework.test.ebay.com" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
	xmlns="http://schemas.xmlsoap.org/wsdl/">
	<wsdl:types>
		<xsd:schema attributeFormDefault="unqualified"
			elementFormDefault="qualified" targetNamespace="http://codegen.tools.soaframework.test.ebay.org"
			xmlns="http://codegen.tools.soaframework.test.ebay.org" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
			<xsd:element name="comment" type="xsd:string"/>
		</xsd:schema>
		<xsd:schema attributeFormDefault="unqualified"
			elementFormDefault="qualified" targetNamespace="http://codegen.tools.soaframework.test.ebay.com"
			xmlns="http://codegen.tools.soaframework.test.ebay.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:org="http://codegen.tools.soaframework.test.ebay.org" >
			<xsd:import namespace="http://codegen.tools.soaframework.test.ebay.org"></xsd:import>
			<xsd:element name="comment"/>

			<xsd:notation name="TestNotation" public="dsf">
			</xsd:notation>
			<xsd:element name="xyz">
				<xsd:unique name="AXCV">
					<xsd:selector xpath="value1"></xsd:selector>
					<xsd:field xpath="value2"></xsd:field>
				</xsd:unique>
			</xsd:element>

			<xsd:element name="TestAnySimpleType" type="xsd:anySimpleType"></xsd:element>
			<xsd:element name="TestAnyType" type="xsd:anyType"></xsd:element>

			<xsd:complexType name="TestMixed" mixed="true">
				<xsd:sequence>
					<xsd:element name="value1" type="xsd:int" />
					<xsd:element name="value2" type="xsd:int" /><xsd:element ref="org:comment" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:element name="fruit" abstract="true" type="Fruit" />
			<xsd:element name="apple" substitutionGroup="tns:fruit"
				type="tns:Apple" />
			<xsd:element name="banana" substitutionGroup="tns:fruit" />
			<xsd:element name="fruitBowl" type="tns:FruitBowl" />
			<xsd:complexType abstract="true" name="Fruit">
				<xsd:attribute name="name" type="xsd:string" />
			</xsd:complexType>

			<xsd:complexType name="Apple">
				<xsd:complexContent>
					<xsd:extension base="tns:Fruit" />
				</xsd:complexContent>
			</xsd:complexType>
			<xsd:complexType name="FruitBowl">
				<xsd:sequence>
					<xsd:element ref="tns:fruit" />
					<xsd:element ref="tns:apple" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:simpleType name="TestListOfListBase">
				<xsd:list itemType="xsd:double"></xsd:list>
			</xsd:simpleType>
			
			<xsd:simpleType name="TestListOfListSub">
				<xsd:restriction base="tns:TestListOfListBase"></xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="TestListOfListSubB">
				<xsd:restriction base="tns:TestListOfListBase"></xsd:restriction>
			</xsd:simpleType>

			<xsd:simpleType name="TestListOfList">
				<xsd:list itemType="xsd:double"></xsd:list>
			</xsd:simpleType>

			<xsd:element name="Inparams">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="value1" type="xsd:int" />
						<xsd:element name="value2" type="xsd:int" />
						<xsd:element name="TestListOfList" type="tns:TestListOfList"
							maxOccurs="unbounded" />
						<xsd:element name="TestListOfLista" type="tns:TestListOfListSub"
							maxOccurs="unbounded" />
						<xsd:element name="TestListOfListb" type="tns:TestListOfListSubB"
							maxOccurs="unbounded" />
						<xsd:element name="TestListOfListc" type="tns:TestListOfListBase"
							maxOccurs="unbounded" />
						<xsd:element name="categorya" type="xsd:ID" minOccurs="0" maxOccurs="3" />
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:complexType abstract="true" name="AXCV">
				<xsd:sequence>
					<xsd:element name="value1" type="xsd:int" />
					<xsd:element name="value2" type="xsd:int" />
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="WrongSequence">
				<xsd:sequence minOccurs="1">
					<xsd:sequence maxOccurs="1">
						<xsd:choice maxOccurs="1">
							<xsd:element name="value1" type="xsd:int" />
							<xsd:element name="value2" type="xsd:int" />
						</xsd:choice>
					</xsd:sequence>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="InvalidaAttrs">
				<xsd:attribute name="AttrWithoutType"></xsd:attribute>
				<xsd:attribute name="AttrWithAnonymousType">
					<xsd:simpleType>
						<xsd:restriction base="xsd:date">
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
			</xsd:complexType>
			<xsd:complexType name="AAAAAA">
				<xsd:sequence>
					<xsd:element name="value1">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:any></xsd:any>
								<xsd:element name="elementAtLevel2" type="tns:AXCV">
								</xsd:element>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="value2" type="xsd:long" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:element name="UsedByRef" type="xsd:long">
			</xsd:element>
			<xsd:attribute name="UsedByAttrRef" type="xsd:long">
			</xsd:attribute>
			<xsd:complexType name="TestRefTypes">
				<xsd:sequence>
					<xsd:element ref="tns:UsedByRef"></xsd:element>
				</xsd:sequence>
				<xsd:attribute ref="tns:UsedByAttrRef"></xsd:attribute>
			</xsd:complexType>


			<xsd:complexType name="AnyNotSupportedType">
				<xsd:anyAttribute></xsd:anyAttribute>
			</xsd:complexType>
			<xsd:complexType name="NillableNotSupported">
				<xsd:sequence>
					<xsd:element name="usesnillable" type="xsd:string"
						nillable="true">

					</xsd:element>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="DuplicateFieldName">
				<xsd:sequence>
					<xsd:element name="fieldNameA" type="xsd:int"></xsd:element>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="DuplicateFieldNameSub">
				<xsd:complexContent>
					<xsd:extension base="tns:DuplicateFieldName">
						<xsd:sequence>
							<xsd:element name="fieldNameA" type="xsd:int"></xsd:element>
							<xsd:element name="fieldNamea" type="xsd:int"></xsd:element>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:complexType name="DuplicateAttrNameSub">
				<xsd:complexContent>
					<xsd:extension base="tns:DuplicateFieldName">
						<xsd:attribute name="fieldNamEa" type="xsd:int" />
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:simpleType name="TestForValue">
				<xsd:list itemType="xsd:long"></xsd:list>
			</xsd:simpleType>
			<xsd:complexType name="TestForValueSub">
				<xsd:simpleContent>
					<xsd:extension base="tns:TestForValue">
						<xsd:attribute name="Value" type="xsd:int" />
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:simpleType name="TestForIDREF">
				<xsd:list itemType="xsd:IDREF"></xsd:list>
			</xsd:simpleType>
			<xsd:complexType name="TestForIDREFSub">
				<xsd:simpleContent>
					<xsd:extension base="xsd:IDREF">
						<xsd:attribute name="attr" type="xsd:IDREFS" />
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:complexType name="FieldNotSupportedType">
				<xsd:sequence>
					<xsd:element name="usesfield">

					</xsd:element>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:element name="keyElement" type="xsd:string">
				<xsd:key name="KeyA">
					<xsd:selector xpath="Inparams.value1"></xsd:selector>
					<xsd:field xpath="Inparams.value1"></xsd:field>
				</xsd:key>
			</xsd:element>
			<xsd:simpleType name="UsesUnion">
				<xsd:union>
					<xsd:simpleType>
						<xsd:list itemType="xsd:long"></xsd:list>
					</xsd:simpleType>
					<xsd:simpleType>
						<xsd:restriction base="xsd:boolean">
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:union>
			</xsd:simpleType>
			<xsd:complexType name="KeyRefNotSupportedType">
				<xsd:sequence>
					<xsd:element name="usesfield">
						<xsd:keyref name="KeyRefAName" refer="tns:KeyA">
							<xsd:selector xpath="Inparams.value1"></xsd:selector>
							<xsd:field xpath="Inparams.value1"></xsd:field>
						</xsd:keyref>
					</xsd:element>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:element name="Response">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="return" type="xsd:int" />
						<xsd:element name="aMyComplexType">
							<xsd:complexType>
								<xsd:sequence>
									<xsd:element name="value1">
										<xsd:complexType>
											<xsd:sequence>
												<xsd:element name="elementAtLevel2" type="xsd:string">
												</xsd:element>
											</xsd:sequence>
										</xsd:complexType>
									</xsd:element>
									<xsd:element name="value2" type="xsd:long" />
								</xsd:sequence>
							</xsd:complexType>
						</xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:schema>
	</wsdl:types>
	<wsdl:message name="Inparams">
		<wsdl:part name="Inparams" element="tns:Inparams" />
	</wsdl:message>
	<wsdl:message name="Response">
		<wsdl:part name="Response" element="tns:Response" />
	</wsdl:message>
	<wsdl:portType name="Calculator">
		<wsdl:operation name="add">
			<wsdl:input name="inparams" message="tns:Inparams" />
			<wsdl:output name="Response" message="tns:Response" />
		</wsdl:operation>
	</wsdl:portType>
	<wsdl:binding name="CalculatorSoapBinding" type="tns:Calculator">
		<soap:binding style="document"
			transport="http://schemas.xmlsoap.org/soap/http" />
		<wsdl:operation name="add">
			<soap:operation soapAction="" style="document" />
			<wsdl:input>
				<soap:body use="literal" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" />
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	<wsdl:service name="CalcService">
		<wsdl:port name="Calculator" binding="tns:CalculatorSoapBinding">
			<soap:address location="http://localhost:8080/calculator" />
			<wswa:UsingAddressing xmlns:wswa="http://www.w3.org/2005/08/addressing/wsdl" />
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>
