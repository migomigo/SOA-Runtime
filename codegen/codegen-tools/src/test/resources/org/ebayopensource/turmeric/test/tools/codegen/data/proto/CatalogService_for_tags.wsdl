<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions name="CatalogService"
	targetNamespace="http://www.ebay.com/marketplace/marketplacecatalog/v1/services"
	xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ns0="http://www.ebay.com/marketplace/marketplacecatalog/v1/services"
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
	xmlns:tns="http://www.ebay.com/marketplace/marketplacecatalog/v1/services"
	xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
	xmlns="http://schemas.xmlsoap.org/wsdl/">
	<wsdl:documentation />
	<wsdl:types>
		<xs:schema attributeFormDefault="unqualified"
			elementFormDefault="qualified"
			targetNamespace="http://www.ebay.com/marketplace/marketplacecatalog/v1/services"
			xmlns:tns="http://www.ebay.com/marketplace/marketplacecatalog/v1/services"
			xmlns:xs="http://www.w3.org/2001/XMLSchema">


            <xs:complexType abstract="true" name="BaseServiceRequest">
				<xs:annotation>
					<xs:documentation>
						This is the base class for request container for
						all service operations.
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>

						processContents="lax" />
				</xs:sequence>
			</xs:complexType>

			<xs:complexType abstract="true" name="BaseServiceResponse">
				<xs:annotation>
					<xs:documentation>
						Base response container for all service operations. Contains error information
						associated with the request.
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="ack" type="tns:AckValue">
						<xs:annotation>
							<xs:documentation>
								Indicates whether there are any errors or warnings associated with the
								processing of the request.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls/>
									<Returned>Always</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="errorMessage" type="tns:ErrorMessage">
						<xs:annotation>
							<xs:documentation>
								Information for an error or warning that occurred when eBay processed the
								request. Not returned when the ack value is Success.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls/>
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="version" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The version of the response payload schema. Indicates the version of the
								schema that eBay used to process the request. Developer Technical Support 
								may ask you for the version value when you work with them to troubleshoot 
								issues.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls/>
									<Returned>Always</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="timestamp" type="xs:dateTime" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								This value represents the date and time when eBay processed the
								request. The time zone of this value is 
								&lt;a href="types/simpleTypes.html#dateTime"&gt;GMT&lt;/a&gt;
								and the format is the ISO 8601 date and time format 
								(YYYY-MM-DDTHH:MM:SS.SSSZ). See the "dateTime" type for information
								about this time format and converting to and from the GMT time zone.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls/>
									<Returned>Always</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>

				</xs:sequence>
			</xs:complexType>



			<xs:complexType name="ErrorMessage">
				<xs:annotation>
					<xs:documentation>
						ErrorMessage to indicate any Error/Warning
						occurred as part of service call. Any run time
						error will not be reported here, but will be
						reported as part of soap fault.
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element maxOccurs="unbounded" minOccurs="0"
						name="error"  type="tns:ErrorData">
						<xs:annotation>
							<xs:documentation>
								Details about a single error.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls />
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:complexType>



			<xs:complexType name="ErrorData">
				<xs:annotation>
					<xs:documentation>
						This represents error details.
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="errorId" type="xs:long">
						<xs:annotation>
							<xs:documentation>
								A unique code that identifies the
								particular error condition that
								occurred. Your application can use error
								codes as identifiers in your customized
								error-handling algorithms.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls />
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="domain" type="xs:string">
						<xs:annotation>
							<xs:documentation>
								Name of the domain upon which the error
								occurred. &lt;dl&gt; &lt;lh&gt;Domains
								include:&lt;/lh&gt; &lt;dt&gt;
								Marketplace &lt;/dt&gt; &lt;dd&gt; A
								business or validation error occurred
								for the Merchandising Service.
								&lt;/dd&gt; &lt;dt&gt; SOA &lt;/dt&gt;
								&lt;dd&gt; An exception occurred in the
								Service Oriented Architecture (SOA)
								framework. &lt;/dd&gt; &lt;/dl&gt;
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls />
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="severity"
						type="tns:ErrorSeverity">
						<xs:annotation>
							<xs:documentation>
								Indicates whether the error caused the
								request to fail (Error) or not
								(Warning). &lt;br&gt;&lt;br&gt; If the
								request fails and the source of the
								problem is within the application (such
								as a missing required element), please
								change the application before you retry
								the request. If the problem is due to
								end-user input data, please alert the
								end-user to the problem and provide the
								means for them to correct the data. Once
								the problem in the application or data
								is resolved, you can attempt to re- send
								the request to eBay.
								&lt;br&gt;&lt;br&gt; If the source of
								the problem is on eBay's side, you can
								retry the request as-is a reasonable
								number of times (eBay recommends twice).
								If the error persists, contact Developer
								Technical Support. Once the problem has
								been resolved, the request may be resent
								in its original form.
								&lt;br&gt;&lt;br&gt; When a warning
								occurs, the error is returned in
								addition to the business data. In this
								case, you do not need to retry the
								request (as the original request was
								successful). However, depending on the
								cause or nature of the warning, you
								might need to contact either the end
								user or eBay to effect a long term
								solution to the problem to prevent it
								from reoccurring in the future.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls />
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="category"
						type="tns:ErrorCategory">
						<xs:annotation>
							<xs:documentation>
								There are three categories of errors:
								request errors, application errors, and
								system errors.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls />
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element name="message" type="xs:string">
						<xs:annotation>
							<xs:documentation>
								A detailed description of the condition
								that resulted in the error.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls />
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="subdomain"
						type="xs:string">
						<xs:annotation>
							<xs:documentation>
								Name of the subdomain upon which the
								error occurred. &lt;dl&gt;
								&lt;lh&gt;Subdomains include:&lt;/lh&gt;
								&lt;dt&gt; Merchandising &lt;/dt&gt;
								&lt;dd&gt; The error is specific to the
								Merchandising service. &lt;/dd&gt;
								&lt;dt&gt; MarketplaceCommon &lt;/dt&gt;
								&lt;dd&gt; The error is common to all
								Marketplace services. &lt;/dd&gt;
								&lt;/dl&gt;
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls />
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="exceptionId"
						type="xs:token">
						<xs:annotation>
							<xs:documentation>
								Unique identifier for an exception
								associated with an error.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls />
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
					<xs:element maxOccurs="unbounded" minOccurs="0"
						name="parameter"  type="tns:ErrorParameter">
						<xs:annotation>
							<xs:documentation>
								Some warning and error messages return
								one or more variables that contain
								contextual information about the error.
								This is often the field or value that
								triggered the error.
							</xs:documentation>
							<xs:appinfo>
								<CallInfo>
									<AllCalls />
									<Returned>Conditionally</Returned>
								</CallInfo>
							</xs:appinfo>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:complexType>


			<xs:complexType name="ErrorParameter">
				<xs:annotation>
					<xs:documentation>
						Contextual information associated with an error.
					</xs:documentation>
				</xs:annotation>
				<xs:simpleContent>
					<xs:extension base="xs:string">
						<xs:attribute name="name" type="xs:string">
							<xs:annotation>
								<xs:documentation>
									The name of the parameter in the
									list of parameter types returned
									within the error type.
								</xs:documentation>
								<xs:appinfo>
									<CallInfo>
										<AllCalls />
										<Returned>
											Conditionally
										</Returned>
									</CallInfo>
								</xs:appinfo>
							</xs:annotation>
						</xs:attribute>
					</xs:extension>
				</xs:simpleContent>
			</xs:complexType>



			<xs:simpleType name="AckValue">
				<xs:annotation>
					<xs:documentation>
						Indicates whether the error is a severe error
						(causing the request to fail) or an
						informational error (a warning) that should be
						communicated to the user.
					</xs:documentation>
				</xs:annotation>
				<xs:restriction base="xs:string">
					<xs:enumeration value="Success">
						<xs:annotation>
							<xs:documentation>
								The request was processed successfully,
								but something occurred that may affect
								your application or the user.
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Failure">
						<xs:annotation>
							<xs:documentation>
								The request that triggered the error was
								not processed successfully. When a
								serious application-level error occurs,
								the error is returned instead of the
								business data.
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Warning">
						<xs:annotation>
							<xs:documentation>
								The request that triggered the error was
								processed successfully but with some
								warnings.
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="PartialFailure">
						<xs:annotation>
							<xs:documentation>
								The request that triggered the error was
								processed successfully but with some
								warnings.
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>

			<xs:simpleType name="ErrorSeverity">
				<xs:annotation>
					<xs:documentation>
						Indicates whether the error is a severe error
						(causing the request to fail) or an
						informational error (a warning) that should be
						communicated to the user.
					</xs:documentation>
				</xs:annotation>
				<xs:restriction base="xs:string">
					<xs:enumeration value="Error">
						<xs:annotation>
							<xs:documentation>
								The request that triggered the error was
								not processed successfully. When a
								serious application-level error occurs,
								the error is returned instead of the
								business data.
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Warning">
						<xs:annotation>
							<xs:documentation>
								The request was processed successfully,
								but something occurred that may affect
								your application or the user. For
								example, eBay may have changed a value
								the user sent in. In this case, eBay
								returns a normal, successful response
								and also returns the warning.
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>

			<xs:simpleType name="ErrorCategory">
				<xs:annotation>
					<xs:documentation>
						There are three categories of error: request
						errors, application errors, and system errors.
						Request and application errors are caused
						primarily by invalid data passed in the request.
						System errors are caused primarily by
						application failures and cannot be corrected by
						changing request values.
					</xs:documentation>
				</xs:annotation>
				<xs:restriction base="xs:string">
					<xs:enumeration value="System">
						<xs:annotation>
							<xs:documentation>
								Indicates that an error has occurred on
								the eBay system side, such as a database
								or server down. An application can retry
								the request as-is a reasonable number of
								times (eBay recommends twice). If the
								error persists, contact Developer
								Technical Support. Once the problem has
								been resolved, the request may be resent
								in its original form.
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Compatibility">
						<xs:annotation>
							<xs:documentation>
								An error occurred due to a problem with
								the request, such as missing or invalid
								fields. The problem must be corrected
								before the request can be made again. If
								the problem is due to something in the
								application (such as a missing required
								field), the application must be changed.
								Once the problem in the application or
								data is resolved, resend the corrected
								request to eBay.
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Request">
						<xs:annotation>
							<xs:documentation>
								An error occurred due to a problem with
								the request, such as invalid or missing
								data. The problem must be corrected
								before the request can be made again. If
								the problem is a result of end-user
								data, the application must alert the
								end-user to the problem and provide the
								means for the end-user to correct the
								data. Once the problem in the data is
								resolved, resend the request to eBay
								with the corrected data.
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>


			<xs:element name="findProductsResponse"
				type="tns:FindProductsResponse">
                <xs:annotation>
                	<xs:documentation>
                		Response object for Find Product operation
                	</xs:documentation>
                </xs:annotation>
			</xs:element>
			<xs:element name="getProductDetailsResponse"
				type="tns:GetProductDetailsResponse">
			</xs:element>
			<xs:element name="findProductsRequest"
				type="tns:FindProductsRequest">
			</xs:element>

			<xs:complexType name="FindProductsRequest">
				<xs:annotation>
					<xs:documentation>
						This is a request object containing input for
						the find product operation
					</xs:documentation>
				</xs:annotation>
				<xs:complexContent>
					<xs:extension base="tns:BaseProductRequest">
						<xs:sequence>


							
                            							<xs:element name="productSearch"
								type="tns:ProductRequest" maxOccurs="unbounded" minOccurs="0">
                                <xs:annotation>
                                	<xs:documentation>
                                		User can findproducts for one
                                		catalog at a time or batch up to
                                		10 catalogs.
                                	</xs:documentation>
                                </xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>



			<xs:complexType name="BaseProductRequest">
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceRequest">
						<xs:sequence>
							<xs:element maxOccurs="1" minOccurs="0"
								name="paginationInput" type="tns:PaginationInput">
								<xs:annotation>
									<xs:documentation>
										Controls the pagination of the
										result set. Child elements
										specify the maximum number of
										products to return per call and
										which page of data to return.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element maxOccurs="1" minOccurs="0"
								name="sortOrderInput" type="tns:SortOrderInput">
								<xs:annotation>
									<xs:documentation>
										Sort Order for the result set.
										Any of the searchable property
										can be used to specify the sort
										order. If no sort order is
										specified then default sort
										order(popularity descending)
										will be applied.
									</xs:documentation>
								</xs:annotation>
							</xs:element>

                            <xs:element name="productStatusFilter" type="tns:ProductStatus" maxOccurs="1" minOccurs="0">
                                <xs:annotation>
                                	<xs:documentation>
                                		User can specify if he wants to
                                		filter out the products which
                                		are disabled for
                                		sell/review/half.
                                	</xs:documentation>
                                </xs:annotation>
							</xs:element>
                            <xs:element name="dataset" type="xs:token" maxOccurs="unbounded" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										This will define what are
										properties that will be returned
										for this catalog. We will
										document the view sets that are
										exposed and what will come out
										of each view set
									</xs:documentation>
								</xs:annotation>
							</xs:element>
                        </xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>

			<xs:complexType name="ProductIdentifier">
				<xs:annotation>
					<xs:documentation>
						Type could be ePID, MementoString as well as
						ISBN, UPC, EAN, Brand_MPN.
					</xs:documentation>
				</xs:annotation>

				<xs:sequence>
					<xs:element name="ePID" type="xs:string"
						maxOccurs="1" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Ebay Product Reference Id
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="ISBN" type="xs:string"
						maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="UPC" type="xs:string"
						maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="EAN" type="xs:string"
						maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="productId" type="xs:string"
						maxOccurs="1" minOccurs="0">
					</xs:element>
                    <xs:element name="brandMPN" type="tns:BrandMPN" maxOccurs="1" minOccurs="0"></xs:element>

						processContents="lax">

                </xs:sequence>
			</xs:complexType>
			<xs:element name="getProductDetailsRequest"
				type="tns:GetProductDetailsRequest">
			</xs:element>

			<xs:complexType name="GetProductDetailsRequest">
				<xs:annotation>
					<xs:documentation>
						This is the request object for getProductDetails
						operation
					</xs:documentation>
				</xs:annotation>
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceRequest">
						<xs:sequence>
							<xs:element name="productIdentifier"
								type="tns:ProductIdentifier" maxOccurs="unbounded" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										The ProductIdentifierType and a
										value for one of the supported
										ProductIdentifierTypes which are
										unique across all sites (ePID,
										MementoString etc)
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="dataset"
								type="xs:token" maxOccurs="unbounded" minOccurs="0">
                                <xs:annotation>
                                	<xs:documentation></xs:documentation>
                                </xs:annotation>
							</xs:element>
						</xs:sequence>

					</xs:extension>
				</xs:complexContent>
			</xs:complexType>

			<xs:complexType name="GetProductDetailsResponse">
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceResponse">
						<xs:sequence>


							<xs:element maxOccurs="1" minOccurs="1"
								name="fitmentDataAvailable" type="xs:boolean">
								<xs:annotation>
									<xs:documentation>
										Indicates whether this product
										has any fitment data
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="product"
								type="tns:Product" maxOccurs="unbounded" minOccurs="0">
							</xs:element>
						</xs:sequence>

					</xs:extension>
				</xs:complexContent>
			</xs:complexType>

			<xs:complexType name="FindProductsResponse">
				<xs:annotation>
					<xs:documentation></xs:documentation>
				</xs:annotation>
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceResponse">
						<xs:sequence>



							<xs:element name="productSearchResult"
								type="tns:ProductResponse" maxOccurs="unbounded"
								minOccurs="0">
							</xs:element>
						</xs:sequence>

					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			



			<xs:complexType name="NumericValue">
				<xs:annotation>
					<xs:documentation>
						This class holds a numeric value
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="value" type="xs:string">
						<xs:annotation>
							<xs:documentation>
								a number
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element maxOccurs="1" minOccurs="0"
						name="unitOfMeasurement" type="xs:token">
						<xs:annotation>
							<xs:documentation>
								UOM of this value. List of valid values
								are: bps, kbps, bit, byte, kb, MB, mW,
								W, Hz, kHz, m, mm, rph, hr, min, ms, ns,
								sec, g, lbs This is optional b/c UOM may
								not apply to all numeric values (e.g.
								number of doors)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="StringValue">
				<xs:annotation>
					<xs:documentation>
						This class holds a String value
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="value" type="xs:string">
						<xs:annotation>
							<xs:documentation>
								a string value
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="URIValue">
				<xs:annotation>
					<xs:documentation>
						This class holds a URL value
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>

						
				</xs:sequence>
			</xs:complexType>


			<xs:complexType name="Property">
				<xs:sequence>
					<xs:element maxOccurs="1" minOccurs="1"
						name="canonicalName" type="xs:string">
						<xs:annotation>
							<xs:documentation>
								This is the canonical name of the
								property. Used to identify a property
								within a catalog.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="propertyNameMetadata"
						type="tns:PropertyNameMetadata" maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="displayName" type="xs:string" maxOccurs="1" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								This will be the display name of the
								property
							</xs:documentation>
						</xs:annotation></xs:element>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="PropertyValue">
				<xs:sequence>
					<xs:element maxOccurs="1" minOccurs="1"
						name="property" type="xs:string">
					</xs:element>
					<xs:element maxOccurs="unbounded" minOccurs="0"
						name="value" type="tns:Value">
					</xs:element>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="Value">
				<xs:sequence>
					<xs:choice>
						<xs:annotation>
							<xs:documentation>
								A value can be one of the types given
								below.
							</xs:documentation>
						</xs:annotation>
						<xs:element name="text"
							type="tns:StringValue">
							<xs:annotation>
								<xs:documentation>
									For string value type.
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="number"
							type="tns:NumericValue">
							<xs:annotation>
								<xs:documentation>
									For numeric value type.
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="URL"
							type="tns:URIValue">
							<xs:annotation>
								<xs:documentation>
									For URL value type.
								</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:choice>

						processContents="lax" />
				</xs:sequence>
			</xs:complexType>


			<xs:complexType name="PaginationInput">
				<xs:annotation>
					<xs:documentation>
						Controls the pagination of the result set. Child
						elements specify the maximum number of item
						listings to return per call and which page of
						data to return. Controls the way the listings
						are organized in the response (not the details
						to return for each listing).
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element minOccurs="0" name="pageNumber"
						type="xs:int">
						<xs:annotation>
							<xs:documentation>
								Specifies the maximum number of entries
								to return in a single call. If the
								number of entries that can be returned
								is less than the value in
								entriesPerPage, then the lower number is
								returned.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="entriesPerPage"
						type="xs:int">
						<xs:annotation>
							<xs:documentation>
								Indicates the maximum number of items
								that can be returned in a SearchResults
								for any given request.
							</xs:documentation>
						</xs:annotation>
					</xs:element>

						processContents="lax" />
				</xs:sequence>
			</xs:complexType>



			<xs:complexType name="PaginationOutput">
				<xs:annotation>
					<xs:documentation></xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element minOccurs="0" name="pageNumber"
						type="xs:int">
						<xs:annotation>
							<xs:documentation>
								Indicates the page of data returned by
								the current call. For instance, for the
								first set of items returned, this field
								has a value of 1.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="entriesPerPage"
						type="xs:int">
						<xs:annotation>
							<xs:documentation>
								Indicates the maximum number of items
								that can be returned in a
								SearchResultItemArray for any given
								call.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="totalPages"
						type="xs:int">
						<xs:annotation>
							<xs:documentation>
								Indicates the total number of pages of
								data that could be returned by repeated
								requests. Returned with a value of 0 if
								no pages are available.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="totalEntries"
						type="xs:int">
						<xs:annotation>
							<xs:documentation>
								Indicates the total number of items that
								could be returned by repeated requests.
								Returned with a value of 0 if no items
								match your search request.
							</xs:documentation>
						</xs:annotation>
					</xs:element>

						processContents="lax" />
				</xs:sequence>
			</xs:complexType>

			<xs:element name="findProductsByCompatibilityResponse"
				type="tns:FindProductsResponse">

			</xs:element>
			<xs:element name="findProductsByCompatibilityRequest"
				type="tns:FindProductsByCompatibilityRequest">
			</xs:element>

			<xs:complexType name="SortOrderInput">
				<xs:annotation>
					<xs:documentation>
						Sort order input for the result set. Any of the
						searchable proerty can be used for property name
						and order can be either ascending or descending.
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="propertyName" type="xs:string"
						maxOccurs="1" minOccurs="1">
                        <xs:annotation>
                        	<xs:documentation>
                        		This will be one of the properties
                        		returned from getProperties call.
                        	</xs:documentation>
                        </xs:annotation>
					</xs:element>
					<xs:element name="order" maxOccurs="1" minOccurs="1"
						type="tns:OrderType">
						<xs:annotation>
							<xs:documentation>
								Order of the sort, either Ascending or
								Descending
							</xs:documentation>
						</xs:annotation>

					</xs:element>
				</xs:sequence>

			</xs:complexType>

			<xs:complexType name="FindProductsByCompatibilityRequest">
				<xs:annotation>
					<xs:documentation>
						This is a request object containing input for
						findProductsInCatalogByFitment operation. caller
						can find products by fitment using this
						operation. Keywords will further refine the
						query with containing keywords.

						Example:

						Get me all products, given

						SiteID=1 CategoryID=2345 (mapped to tires
						catalog)

						Namespace: Interface

						Name:Value pair#1: Tire Width=185

						Namespace: Compatibility

						Name:Value pair #1: Make=BMW

						Name:Value pair #2: Year=2007

					</xs:documentation>
				</xs:annotation>
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceRequest">
						<xs:sequence>




							<xs:element
								name="productByCompatibilitySearch"
								type="tns:ProductByCompatibilityRequest" maxOccurs="unbounded"
								minOccurs="0">
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>


			<xs:element name="getProductSearchNamesResponse"
				type="tns:GetProductSearchNamesResponse">

			</xs:element>
			<xs:element name="getProductSearchValuesRequest"
				type="tns:GetProductSearchValuesRequest">

                <xs:annotation>
                	<xs:documentation>
                		User can request if the user wants the response
                		a List not as Tree
                	</xs:documentation>
                </xs:annotation>
			</xs:element>
			<xs:element name="getProductSearchValuesResponse"
				type="tns:GetProductSearchValuesResponse">

			</xs:element>




			<xs:complexType name="GetProductSearchNamesRequest">
				<xs:annotation>
					<xs:documentation>
						Request object for getPropertiesInCatalog
						operation.
					</xs:documentation>
				</xs:annotation>
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceRequest">
						<xs:sequence>
							<xs:element name="catalogId"
								type="xs:string" maxOccurs="1" minOccurs="1">
								<xs:annotation>
									<xs:documentation>
										Return properties for a given
										catalog.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="dataset"
								type="xs:token" maxOccurs="unbounded" minOccurs="0">
                                <xs:annotation>
                                	<xs:documentation>
                                		This will define what are
                                		properties that will be returned
                                		for this catalog. We will
                                		document the view sets that are
                                		exposed and what will come out
                                		of each view set
                                	</xs:documentation>
                                </xs:annotation>
							</xs:element>
						</xs:sequence>

					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:element name="getProductSearchNamesRequest"
				type="tns:GetProductSearchNamesRequest">
				<xs:annotation>
					<xs:documentation>
						Request object for getPropertiesInCatalog
						operation.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:complexType name="GetProductSearchNamesResponse">
				<xs:annotation>
					<xs:documentation>
						Response containing the list of properties
					</xs:documentation>
				</xs:annotation>
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceResponse">
						<xs:sequence>

							<xs:element name="properties"
								type="tns:Properties" maxOccurs="unbounded" minOccurs="0">
                                <xs:annotation>
                                	<xs:documentation>
                                		This will contain the catalog
                                		id, version and all the
                                		properties for the input catalog
                                		id.
                                	</xs:documentation>
                                </xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>

			<xs:complexType name="GetProductSearchValuesRequest">
				<xs:complexContent>
					<xs:extension
						base="tns:GetProductSearchValuesBaseRequest">
						<xs:sequence>

							<xs:element name="propertyName"
								type="xs:string" maxOccurs="1" minOccurs="1">
								<xs:annotation>
									<xs:documentation>
										PropertyLiteral Determines which
										property to be returned.
									</xs:documentation>
								</xs:annotation>
							</xs:element>



						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType
				name="GetProductSearchValuesBaseRequest">
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceRequest">
						<xs:sequence>
							<xs:element name="catalogId"
								type="xs:string" maxOccurs="1" minOccurs="1">
								<xs:annotation>
									<xs:documentation>
										This should be a valid catalog
										id.
									</xs:documentation>
								</xs:annotation>
							</xs:element>

							<xs:element name="propertyFilter"
								type="tns:PropertyValue" maxOccurs="unbounded" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										Constrains the output of values
										for the given PropertyLiteral
										(or group of properties) as per
										given
										ConstrainingPropertyLiteral:ConstrainingValueLiteral
										pair (or pairs) according to the
										respective dependency graph.
										AND-logic will be applied within
										the constraint.
									</xs:documentation>
								</xs:annotation>
							</xs:element>

							<xs:element name="listFormatOnly"
								type="xs:boolean" maxOccurs="1" minOccurs="0">
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType
				name="GetProductSearchValuesResponse">
                <xs:annotation>
                	<xs:documentation>
                		This will contain the response for the
                		propertyValues. If the catalog is fitment
                		enabled then we will have the propertyValueTree
                		populated. If the catalog is not fitment enabled
                		then we will generate the propertyValues which
                		will be a list of values for each property and
                		not a dependency tree
                	</xs:documentation>
                </xs:annotation>
                <xs:complexContent>
					<xs:extension base="tns:BaseServiceResponse">
						<xs:sequence>
							<xs:element name="metadataVersion"
								type="xs:string" maxOccurs="1" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										Version information reflects the
										last update of the values within
										the dependency graph.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="propertyValues"
								type="tns:PropertyValue" maxOccurs="unbounded" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										This will be populated for the
										non-fitment enabled category
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="propertyValuesTree"
								type="tns:PropertyNameValue" maxOccurs="1" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										This will be populated for
										non-fitment enabled category
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="treeFormat"
								type="xs:boolean" maxOccurs="1" minOccurs="1">
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>

			


			<xs:simpleType name="OrderType">
				<xs:annotation>
					<xs:documentation>
						Defines the order type as Ascending or
						Descending
					</xs:documentation>
				</xs:annotation>
				<xs:restriction base="xs:string">
					<xs:enumeration value="Ascending"></xs:enumeration>
					<xs:enumeration value="Descending"></xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
			<xs:element name="getProductCompatibilitiesRequest"
				type="tns:GetProductCompatibilitiesRequest">
			</xs:element>
			<xs:element name="getProductCompatibilitiesResponse"
				type="tns:GetProductCompatiblitiesResponse">

			</xs:element>


			<xs:complexType name="GetProductBaseResponse">
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceResponse">
						<xs:sequence>

							<xs:element name="productDetails"
								type="tns:BaseProductDetails" maxOccurs="unbounded"
								minOccurs="0">
							</xs:element>
						</xs:sequence>

					</xs:extension>
				</xs:complexContent>
			</xs:complexType>

			<xs:complexType name="GetProductCompatibilitiesRequest">
				<xs:annotation>
					<xs:documentation>
						Request object for getProductFitmentDetails
						operation.
					</xs:documentation>
				</xs:annotation>
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceRequest">
						<xs:sequence>
							<xs:element name="productIdentifier"
								type="tns:ProductIdentifier" maxOccurs="1" minOccurs="1">
								<xs:annotation>
									<xs:documentation>
										The ProductIdentifierType and a
										value for one of the supported
										ProductIdentifierTypes which are
										unique across all sites (ePID,
										MementoString)
									</xs:documentation>
								</xs:annotation>
							</xs:element>

							<xs:element name="paginationInput"
								type="tns:PaginationInput" maxOccurs="1" minOccurs="0">
							</xs:element>
							<xs:element name="propertyFilter"
								type="tns:PropertyValue" maxOccurs="1" minOccurs="0">
							</xs:element>
							<xs:element name="dataset" type="xs:token"
								maxOccurs="unbounded" minOccurs="0">
							</xs:element>
							<xs:element name="sortOrderInput"
								type="tns:CompatibilitySort" maxOccurs="unbounded"
								minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										We need to allow multiple sort
										orders. This is very specific to
										fitment. We allow the caller
										sorty by Make + Model + year. To
										start with we will only allow 5
										sorts
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="disabledProductFilter"
								type="tns:ProductStatus" maxOccurs="1" minOccurs="0">
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>

			<xs:complexType name="GetProductCompatiblitiesResponse">
				<xs:annotation>
					<xs:documentation>
						Response object for getProductFitmentDetails
						operation.
					</xs:documentation>
				</xs:annotation>
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceResponse">
						<xs:sequence>
							<xs:element name="paginationOutput"
								type="tns:PaginationOutput" maxOccurs="1" minOccurs="1">
								<xs:annotation>
									<xs:documentation>
										Indicates the pagination of the
										result set. Child elements
										indicate the maximum number of
										item listings returned per
										response and which page of data
										has been returned.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="compatibilityDetails"
								type="tns:Product" maxOccurs="1" minOccurs="0">
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>



			
		







			<xs:element name="getCompatibilitySearchNamesRequest" type="tns:GetCompatibilitySearchNamesRequest">
			</xs:element>
			<xs:element name="getCompatibilitySearchNamesResponse" type="tns:GetProductSearchNamesResponse">
			</xs:element>
		
			<xs:complexType name="GetCompatibilitySearchNamesRequest">
				<xs:complexContent>
					<xs:extension base="tns:BaseServiceRequest">
						<xs:sequence>
							<xs:element name="catalogId"
								type="xs:string" maxOccurs="1" minOccurs="1">
								<xs:annotation>
									<xs:documentation>
										Provide the interface catalog
										id. For example to get the cars
										properties, provide tires
										catalog id.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="dataset"
								type="xs:token" maxOccurs="unbounded" minOccurs="0">
                                <xs:annotation>
                                	<xs:documentation>
                                		This will define what are
                                		properties that will be returned
                                		for this catalog. We will
                                		document the view sets that are
                                		exposed and what will come out
                                		of each view set
                                	</xs:documentation>
                                </xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
		
			<xs:element name="getCompatibilitySearchValuesRequest" type="tns:GetProductSearchValuesRequest">
			</xs:element>
			<xs:element name="getCompatibilitySearchValuesResponse" type="tns:GetProductSearchValuesResponse">
			</xs:element>
		
		
			<xs:complexType name="Properties">
				<xs:sequence>
					<xs:element name="metadataVersion" type="xs:string"
						maxOccurs="1" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Version information reflects the latest
								update of the properties or values.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="catalogId" type="xs:string"
						maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="property" type="tns:Property"
						maxOccurs="unbounded" minOccurs="0">
					</xs:element>
					<xs:element name="dataset" type="xs:token" maxOccurs="1" minOccurs="1"></xs:element>
				</xs:sequence>
			</xs:complexType>
		
		
			<xs:complexType name="BaseProductDetails">
				<xs:sequence>
					<xs:element name="product"
						type="tns:Product" maxOccurs="1" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								All products as per the given input
								parameters. For each product, all
								properties and their respective values
								are returned as N:V pairs.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:complexType>
		
			<xs:complexType name="Product">
				<xs:sequence>
					<xs:element name="productIdentifier" type="tns:ProductIdentifier"
						maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="productDetails"
						type="tns:PropertyValue" maxOccurs="unbounded" minOccurs="0">
					</xs:element>
					<xs:element name="productStatus" type="tns:ProductStatus" maxOccurs="1" minOccurs="0"></xs:element>
				</xs:sequence>
			</xs:complexType>
		
			<xs:complexType name="ProductFamily">
				<xs:annotation>
					<xs:documentation>
						Product Family Id for the Product. A family of
						products are all different editions or releases
						of the same product. for example, 3 different
						revisions of the same book are a family. The
						widescreen and pan-and-scan versions of the same
						movie would be in a family.
					</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="count" type="xs:int" maxOccurs="1"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								number of products in the family group
							</xs:documentation>
						</xs:annotation>
					</xs:element>
                    <xs:element name="headProduct" type="tns:Product" maxOccurs="1" minOccurs="0">
                    	<xs:annotation>
                    		<xs:documentation>
                    			This will contain the details to be
                    			displayed for the head product

                    		</xs:documentation>
                    	</xs:annotation></xs:element>
                    <xs:element name="member" type="tns:Product"
						maxOccurs="unbounded" minOccurs="0">
                        <xs:annotation>
                        	<xs:documentation>
                        		This will contain all the member
                        		products in the family
                        	</xs:documentation>
                        </xs:annotation>
                    </xs:element>
				</xs:sequence>
			</xs:complexType>
		
		
			<xs:complexType name="CompatibilityPropertyFilter">
				<xs:sequence>
					<xs:choice>

						<xs:element name="propertyFilter"
							type="tns:PropertyValue" maxOccurs="unbounded" minOccurs="0">
						</xs:element>
						<xs:element name="AAIA" type="xs:string"
							maxOccurs="1" minOccurs="0">
						</xs:element>
						<xs:element name="HSNTSN" type="xs:string"
							maxOccurs="1" minOccurs="0">
						</xs:element>

							maxOccurs="unbounded">

					</xs:choice>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="ProductDetails">
				<xs:complexContent>
					<xs:extension base="tns:BaseProductDetails">
						<xs:sequence>
							<xs:element name="productGroupings"
								type="tns:ProductGroupings" maxOccurs="1" minOccurs="0">
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
		
			<xs:complexType name="ProductGroupings">
				<xs:sequence>
					<xs:element name="productFamily"
						type="tns:ProductFamily" maxOccurs="1" minOccurs="0">
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		
		
			<xs:complexType name="ProductStatus">
                <xs:annotation>
                	<xs:documentation>
                		This will indicate if the product is disabled
                		for the specific application like selling flow,
                		review flow or half sell flow.
                	</xs:documentation>
                </xs:annotation>
                <xs:sequence>
					<xs:element name="excludeForeBaySelling" type="xs:boolean"
						maxOccurs="1" minOccurs="0">
                        <xs:annotation>
                        	<xs:documentation></xs:documentation>
                        </xs:annotation>
					</xs:element>
					<xs:element name="excludeForeBayReviews"
						type="xs:boolean" maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="excludeForHalfSelling" type="xs:boolean"
						maxOccurs="1" minOccurs="0">
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		
			<xs:complexType name="PropertyNameMetadata">
                <xs:annotation>
                	<xs:documentation>
                		This will contain any metadata about the propert
                		name.
                	</xs:documentation>
                </xs:annotation>
                <xs:sequence>
					<xs:element name="displaySequence" type="xs:int"
						maxOccurs="1" minOccurs="0">
					</xs:element>

				</xs:sequence>
			</xs:complexType>
		
			<xs:complexType name="BrandMPN">
				<xs:sequence>
					<xs:element name="brand" type="xs:string"
						maxOccurs="1" minOccurs="1">
					</xs:element>
					<xs:element name="MPN" type="xs:string" maxOccurs="1" minOccurs="1"></xs:element>
				</xs:sequence>
			</xs:complexType>
		
			<xs:complexType name="PropertyNameValue">
				<xs:sequence>
					<xs:element name="name" type="xs:string"
						maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="value" type="xs:string"
						maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="childPropertyNameValue" type="tns:PropertyNameValue" maxOccurs="unbounded" minOccurs="0"></xs:element>
				</xs:sequence>
			</xs:complexType>
		
			<xs:complexType name="CompatibilitySort">
				<xs:sequence>
					<xs:element name="sortOrderInput"
						type="tns:SortOrderInput" maxOccurs="1" minOccurs="1">
					</xs:element>
					<xs:element name="sortPriority" type="tns:SortPriority" maxOccurs="1" minOccurs="1"></xs:element>
				</xs:sequence>
			</xs:complexType>
		
			<xs:simpleType name="SortPriority">
				<xs:restriction base="xs:token">
					<xs:enumeration value="Sort1"></xs:enumeration>
					<xs:enumeration value="Sort2"></xs:enumeration>
					<xs:enumeration value="Sort3"></xs:enumeration>
					<xs:enumeration value="Sort4"></xs:enumeration>
					<xs:enumeration value="Sort5"></xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
			<xs:element name="getProductSearchValuesBulkRequest" type="tns:GetProductSearchValuesBulkRequest">
			</xs:element>
			<xs:element name="getProductSearchValuesBulkResponse" type="tns:GetProductSearchValuesBulkResponse">
			</xs:element>
			<xs:element name="getCompatibilitySearchValuesBulkRequest" type="tns:GetProductSearchValuesBulkRequest">
			</xs:element>
			<xs:element name="getCompatibilitySearchValuesBulkResponse" type="tns:GetCompatibilitySearchValuesBulkResponse">
			</xs:element>
		
			<xs:complexType
				name="GetCompatibilitySearchValuesBulkRequest">
				<xs:complexContent>
					<xs:extension
						base="tns:GetProductSearchValuesBaseRequest">
						<xs:sequence>
							<xs:element name="propertyName"
								type="xs:string" maxOccurs="unbounded" minOccurs="0">
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
		
			<xs:complexType
				name="GetProductSearchValuesBulkResponse">
				<xs:complexContent>
					<xs:extension
						base="tns:GetProductSearchValuesResponse">
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
		
			<xs:complexType
				name="GetCompatibilitySearchValuesBulkResponse">
				<xs:complexContent>
					<xs:extension
						base="tns:GetProductSearchValuesResponse">
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
		
			<xs:complexType name="ProductRequest">
				<xs:sequence>
                    <xs:element name="invocationId" type="xs:string" maxOccurs="1" minOccurs="1">
                    	<xs:annotation>
                    		<xs:documentation>
                    			Invocation id will help the user to
                    			match the request to response for batch
                    			operations
                    		</xs:documentation>
                    	</xs:annotation></xs:element>
                    <xs:element name="catalogId" type="xs:string"
						maxOccurs="1" minOccurs="0">
					</xs:element>
                    <xs:element name="keywords" type="xs:string" maxOccurs="1" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Keywords will be used to further refine
								the query. products whose catalog
								searchable property value contain this
								keyword will be returned for
								findProductsInCatalog. This keyword will
								be AND in the constraint with the N:V
								pairs
							</xs:documentation>
						</xs:annotation>
					</xs:element>
                    <xs:element name="propertyFilter" type="tns:PropertyValue" maxOccurs="unbounded" minOccurs="0">
							</xs:element>
				</xs:sequence>
			</xs:complexType>
		
			<xs:complexType name="ProductResponse">
				<xs:sequence>
					<xs:element name="products"
						type="tns:ProductDetails" maxOccurs="unbounded" minOccurs="0">
					</xs:element>
					<xs:element name="paginationOutput"
						type="tns:PaginationOutput" maxOccurs="1" minOccurs="0">
					</xs:element>
					<xs:element name="invocationId" type="xs:string" maxOccurs="1" minOccurs="0"></xs:element>
				</xs:sequence>
			</xs:complexType>
		
			<xs:complexType name="ProductByCompatibilityRequest">
				<xs:sequence>
                    <xs:element name="applicationPropertyFilter" type="tns:CompatibilityPropertyFilter" maxOccurs="1" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										This will contain the property
										name value pairs of the
										application (for example :
										cars). Applicaiton property N:V
										pairs can be specified by using
										property filter or in the form
										AAIA XML or HSNTSN format.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
                    <xs:element name="productSearch"
						type="tns:ProductRequest" maxOccurs="1" minOccurs="0">
					</xs:element>
				</xs:sequence>
			</xs:complexType>
		
			<xs:complexType name="GetProductSearchValuesBulkRequest">
				<xs:complexContent>
					<xs:extension
						base="tns:GetProductSearchValuesBaseRequest">
						<xs:sequence>
							<xs:element name="propertyName"
								type="xs:string" maxOccurs="unbounded" minOccurs="0">
							</xs:element>
						</xs:sequence>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
		
			<xs:simpleType name="DatasetValue">
				<xs:restriction base="xs:token">
					<xs:enumeration value="Searchable"></xs:enumeration>
					<xs:enumeration value="Sortable"></xs:enumeration>
					<xs:enumeration value="DisplayableSmall"></xs:enumeration>
					<xs:enumeration value="DisplayableMedium"></xs:enumeration>
					<xs:enumeration value="DisplayableLarge"></xs:enumeration>
					<xs:enumeration value="DisplayableAll"></xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:schema>
	</wsdl:types>
	<wsdl:message name="getProductDetailsRequest">
		<wsdl:part name="parameters" element="ns0:getProductDetailsRequest">
			<wsdl:documentation>
				Request object for getProductDetails operation
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="getProductDetailsResponse">
		<wsdl:part name="parameters" element="ns0:getProductDetailsResponse">
			<wsdl:documentation>
				response object for getProductDetails operation
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="findProductsResponse">
		<wsdl:part name="parameters"
			element="ns0:findProductsResponse">
			<wsdl:documentation>
				response object for findProductInCatalog operation
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="findProductsRequest">
		<wsdl:part name="parameters" element="ns0:findProductsRequest">
			<wsdl:documentation>
				request object for findProductsInCatalog operation
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="findProductsByCompatibilityRequest">
		<wsdl:part name="parameters"
			element="ns0:findProductsByCompatibilityRequest">
			<wsdl:documentation>
				Request object for findProductsInCatalogByFitment operation
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="findProductsByCompatibilityResponse">
		<wsdl:part name="parameters"
			element="ns0:findProductsByCompatibilityResponse">
			<wsdl:documentation>
				Response object for findProductsInCatalogByFitment operation
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="getProductSearchNamesRequest">
		<wsdl:part name="parameters"
			element="ns0:getProductSearchNamesRequest">
			<wsdl:documentation>
				Request object for getPropertiesInCatalog operation.
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="getProductSearchNamesResponse">
		<wsdl:part name="parameters"
			element="ns0:getProductSearchNamesResponse">
			<wsdl:documentation>
				Response object for getPropertiesInCatalog
				operation.
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="getProductSearchValuesRequest">
		<wsdl:part name="parameters"
			element="ns0:getProductSearchValuesRequest">
			<wsdl:documentation>
				Request object for getPropertyValues
				operation.
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="getProductSearchValuesResponse">
		<wsdl:part name="parameters"
			element="ns0:getProductSearchValuesResponse">
			<wsdl:documentation>
				Response object for getPropertyValues
				operation.
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="getProductCompatibilitiesRequest">
		<wsdl:part name="parameters"
			element="ns0:getProductCompatibilitiesRequest">
			<wsdl:documentation>
				Request object for getProductFitmentDetails operation.
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="getProductCompatibilitiesResponse">
		<wsdl:part name="parameters"
			element="ns0:getProductCompatibilitiesResponse">
			<wsdl:documentation>
				Response object for getProductFitmentDetails operation.
			</wsdl:documentation>
		</wsdl:part>
	</wsdl:message>

	<wsdl:message name="getCompatibilitySearchNamesRequest">
		<wsdl:part name="parameters" element="ns0:getCompatibilitySearchNamesRequest"></wsdl:part>
	</wsdl:message>
	<wsdl:message name="getCompatibilitySearchNamesResponse">
		<wsdl:part name="parameters" element="ns0:getCompatibilitySearchNamesResponse"></wsdl:part>
	</wsdl:message>
	<wsdl:message name="getCompatibilitySearchValuesRequest">
		<wsdl:part name="parameters" element="ns0:getCompatibilitySearchValuesRequest"></wsdl:part>
	</wsdl:message>
	<wsdl:message name="getCompatibilitySearchValuesResponse">
		<wsdl:part name="parameters" element="ns0:getCompatibilitySearchValuesResponse"></wsdl:part>
	</wsdl:message>
	<wsdl:message name="getProductSearchValuesBulkRequest">
		<wsdl:part name="parameters" element="ns0:getProductSearchValuesBulkRequest"></wsdl:part>
	</wsdl:message>
	<wsdl:message name="getProductSearchValuesBulkResponse">
		<wsdl:part name="parameters" element="ns0:getProductSearchValuesBulkResponse"></wsdl:part>
	</wsdl:message>
	<wsdl:message name="getCompatibilitySearchValuesBulkRequest">
		<wsdl:part name="parameters" element="ns0:getCompatibilitySearchValuesBulkRequest"></wsdl:part>
	</wsdl:message>
	<wsdl:message name="getCompatibilitySearchValuesBulkResponse">
		<wsdl:part name="parameters" element="ns0:getCompatibilitySearchValuesBulkResponse"></wsdl:part>
	</wsdl:message>
	<wsdl:portType name="CatalogServicePortType">
	<wsdl:operation name="getProductSearchNames">
			<wsdl:documentation>
				This Operation returns all properties which are
				available for a given catalog. These properties, along
				with their respective values, can be used to query the
				catalog via find and get product operations

For example
If the input is parts catalog id, the properties would be (according to the dependency graph): &amp;quot;Part type &amp;quot;, &amp;quot;Sub part type &amp;quot;, &amp;quot;Manufacturer &amp;quot;
	if the input is tires catalog id, the properties would be (according to the dependency graph): &amp;quot;Manufacturer &amp;quot;, &amp;quot;Tire Width &amp;quot;, &amp;quot;Aspect Ratio &amp;quot;, &amp;quot;Diameter &amp;quot;, &amp;quot;Load Index &amp;quot;, &amp;quot;Speed Index &amp;quot;

			</wsdl:documentation>
			<wsdl:input
				message="ns0:getProductSearchNamesRequest">
			</wsdl:input>
			<wsdl:output
				message="ns0:getProductSearchNamesResponse">
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="getCompatibilitySearchNames">
			<wsdl:documentation>This operation will provide the ability to get properties of the application. For example,If the input is Tires catalog Id then the response would be the properties : &amp;quot;Make &amp;quot;, &amp;quot;Model &amp;quot;, &amp;quot;Year &amp;quot;, &amp;quot;Trim &amp;quot;, &amp;quot;Engine &amp;quot;
</wsdl:documentation>
			<wsdl:input message="ns0:getCompatibilitySearchNamesRequest"></wsdl:input>
			<wsdl:output message="ns0:getCompatibilitySearchNamesResponse"></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="getProductSearchValues">
			<wsdl:documentation>This will contain the response for the propertyValues. If the catalog is fitment enabled then we will have the propertyValueTree populated. If the catalog is not fitment enabled then we will generate the propertyValues which will be a list of values for each property and not a dependency tree 
		

  For example,In case of fitment enabled category,
For the input tire catalog id, get me all possible values for a property (e.g. Aspect Ratio) , constrained by one or more properties (e.g. Tire Width= &amp;quot;225 &amp;quot;, AND Brand= &amp;quot;Bridgestone &amp;quot;) 

Returns a list of all available aspect ratios for Bridgestone tires which have a tire width of 225.


			</wsdl:documentation>
			<wsdl:input
				message="ns0:getProductSearchValuesRequest">
			</wsdl:input>
			<wsdl:output
				message="ns0:getProductSearchValuesResponse">
			</wsdl:output>
		</wsdl:operation>
			<wsdl:operation name="getProductSearchValuesBulk">
			<wsdl:documentation>This will enable the user to get property values for more than one field. This will allow the user to get values for upto 10 fields.This operation will be Rate limited.</wsdl:documentation>
			<wsdl:input message="ns0:getProductSearchValuesBulkRequest"></wsdl:input>
			<wsdl:output message="ns0:getProductSearchValuesBulkResponse"></wsdl:output>
		</wsdl:operation>
				<wsdl:operation name="getCompatibilitySearchValues">
			<wsdl:documentation>This operation will provide the property values for the application catalog. Input will be the catalog id of the interface catalog.  This operation will only allow the user to get one field at a time

For input Tires Catalog id, Get me all possible values for a property (e.g. Engine) , constrained by one or more properties (e.g. Make= &amp;quot;Honda &amp;quot;, Namespace= &amp;quot;Application &amp;quot; AND Model= &amp;quot;Civic &amp;quot; AND Year= &amp;quot;1997 &amp;quot;) 

Returns a list of all available engines for a 1997 Honda Civic
</wsdl:documentation>
			<wsdl:input message="ns0:getCompatibilitySearchValuesRequest"></wsdl:input>
			<wsdl:output message="ns0:getCompatibilitySearchValuesResponse"></wsdl:output>
		</wsdl:operation>
			<wsdl:operation name="getCompatibilitySearchValuesBulk">
			<wsdl:documentation>This will enable the user to get compatibiltiy property values for more than one field. This will allow the user to get values for upto 10 fields.This operation will be Rate limited.</wsdl:documentation>
			<wsdl:input message="ns0:getCompatibilitySearchValuesBulkRequest"></wsdl:input>
			<wsdl:output message="ns0:getCompatibilitySearchValuesBulkResponse"></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="findProducts">
			<wsdl:documentation>
				This opertion will find the products for the given
				catalog and catalog property N:V pairs and optional
				keyword

For example

Get me all products, given Parts Catalog

Name:Value pair #1:  &amp;quot;Manufacturer &amp;quot;= &amp;quot;Brembo &amp;quot;

Name:Value pair #2:  &amp;quot;Part type &amp;quot;= &amp;quot;Brake disc &amp;quot;

	Returns all products which are of part type  &amp;quot;brake discs &amp;quot; and manufactured by  &amp;quot;Brembo &amp;quot;

			</wsdl:documentation>
			<wsdl:input name="findProductsInCatalogRequest"
				message="ns0:findProductsRequest">
				<wsdl:documentation />
			</wsdl:input>
			<wsdl:output message="ns0:findProductsResponse"></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="findProductsByCompatibility">
			<wsdl:documentation>
				This opertion will find the products for the given
				catalog and catalog property N:V pairs and comatibility property N:V Pairs
			
Example

Given Tires catalog, get me all products, 
property Filter
•	Name:Value pair #1:  &amp;quot;Tire Width &amp;quot;= &amp;quot;185 &amp;quot;

Application Filter

•	Name:Value pair #1:  &amp;quot;Make &amp;quot;= &amp;quot;BMW &amp;quot;

•	Name:Value pair #2:  &amp;quot;Year &amp;quot;= &amp;quot;2007 &amp;quot;

Returns all products (in tires catalog) which have a tire width of  &amp;quot;185 &amp;quot; and fit any 2007 BMW
</wsdl:documentation>
			<wsdl:input message="ns0:findProductsByCompatibilityRequest"></wsdl:input>
			<wsdl:output message="ns0:findProductsByCompatibilityResponse"></wsdl:output>
		</wsdl:operation>
		
		<wsdl:operation name="getProductDetails">
			<wsdl:documentation>
				Given the product reference id, this operation will get
				the product details. This operation will indicate if the product has fitment information or not.
			</wsdl:documentation>
			<wsdl:input message="ns0:getProductDetailsRequest"></wsdl:input>
			<wsdl:output message="ns0:getProductDetailsResponse"></wsdl:output>
		</wsdl:operation>
		
		
		
		<wsdl:operation name="getProductCompatibilities">
			<wsdl:documentation>
				This operation returns all available fitment details for
				a given product reference id. The caller would know if a
				product has fitment data or not, by calling the
				getProductDetails operation.
			</wsdl:documentation>
			<wsdl:input message="ns0:getProductCompatibilitiesRequest"></wsdl:input>
			<wsdl:output
				message="ns0:getProductCompatibilitiesResponse">
			</wsdl:output>
		</wsdl:operation>


	
	
	</wsdl:portType>
	<wsdl:binding name="CatalogServiceSOAP12Binding"
		type="ns0:CatalogServicePortType">
<soap12:binding xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
	
		<wsdl:operation name="findProducts">
		<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:findProducts" style="document"/>
			
			<wsdl:input name="findProductsInCatalogRequest">

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="getProductDetails">

			<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:getProductDetails" style="document"/>
			<wsdl:input>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="findProductsByCompatibility">

			<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:findProductsByCompatibility" style="document"/>
			<wsdl:input>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="getProductSearchNames">

			<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:getProductSearchNames" style="document"/>
			<wsdl:input>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="getProductSearchValues">

			<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:getProductSearchValues" style="document"/>
			<wsdl:input>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="getProductCompatibilities">

			<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:getProductCompatibilities" style="document"/>
			<wsdl:input>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>

				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="getCompatibilitySearchNames">
			<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:getCompatibilitySearchNames" style="document"/>
			<wsdl:input>
				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="getProductSearchValuesBulk">
			<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:getProductSearchValuesBulk" style="document"/>
			<wsdl:input>
				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation
			name="getCompatibilitySearchValues">
			<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:getCompatibilitySearchValues" style="document"/>
			<wsdl:input>
				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="getCompatibilitySearchValuesBulk">
			<soap12:operation xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" soapAction="urn:getCompatibilitySearchValuesBulk" style="document"/>
			<wsdl:input>
				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap12:body xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" use="literal"/>
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	<wsdl:service name="CatalogService">
		<wsdl:documentation>
			This service provides the ability to do a product search and
			find the metadata required for the product search.
			<Version>1.0.0</Version>
		</wsdl:documentation>
		<wsdl:port name="CatalogServiceSOAP12port_http"
			binding="ns0:CatalogServiceSOAP12Binding">
			<soap12:address
				location="http://svcs.ebay.com/services/marketplacecatalog/CatalogService/v1" />
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>
